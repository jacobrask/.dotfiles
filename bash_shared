#
# BASH settings shared across my shells.
# ======================================

# ALIASES

# file system
# ===========

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias l='ls -1'
alias ls='ls --color=auto'
alias la='ls -lhA'
alias cp='cp -riv'
alias mv='mv -iv'
mkcd ()
{
    mkdir -p "$@"
    cd "$@"
}
alias f='find . -type f -name 2>/dev/null'
ff()
{
    find . -type f -iname '*'"$@"'*' 2>/dev/null
}
fr ()
{
    find . -type f -iname "$1" -exec perl -pi -e "$2" {} \;
}
fcnt()
{
    if [ -z "$@" ]
    then
        find . -type f | wc -l
    else
        find . -type f -iname '*'"$@"'*' | wc -l
    fi
}
s()
{
    if type -P ag &>/dev/null; then
        ag $1
    else
        grep -rC2 --color $1 *
    fi
}
function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) rar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


# development
# ===========

export EDITOR=vim
alias svim='sudo vim'
alias vimo='vim -O'
vimf () 
{ 
    vim $(ack -g $@)
}

# If we have Node Version Manager installed, source it.
if [ -f ~/.nvm/nvm.sh ]; then
   . ~/.nvm/nvm.sh
fi

# git
alias gik='gitk --all &'
alias gis='git status'
alias gic='git commit'
alias gica='git commit --amend'
alias gicv='git commit -v'
alias gidi='git diff -w'
alias gico='git checkout '
alias gipl='git pull'
alias giph='git push --recurse-submodules=on-demand'
alias gibr='git branch '
alias gi-='git reset HEAD '
alias gi+='git add '

alias gista='git stash'
alias gistap='git stash pop'
alias gihist='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'

complete -o default -o nospace -F _git_branch gibr
complete -o default -o nospace -F _git_pull gipl
complete -o default -o nospace -F _git_push giph


# system
# ======

psg () 
{
    FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
    REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
    ps aux | grep "[$FIRST]$REST"
}
alias hist='history | grep'


# CONFIGURATION

# development
# ===========

RED="\[\033[1;31m\]"
LIGHT_RED="\[\033[0;31m\]"
BROWN="\[\033[0;30m\]"
BLUE_BOLD="\[\033[1;34m\]"
BLUE="\[\033[0;34m\]"
WHITE="\[\033[1;37m\]"
TURQ="\[\033[0;36m\]"
NO_COLOR='\e[m'

# show git branch in prompt

GIT_PS1_SHOWDIRTYSTATE=1 #... untagged(*) and staged(+) changes
GIT_PS1_SHOWSTASHSTATE=1 #... if something is stashed($)
GIT_PS1_SHOWUNTRACKEDFILES=1 #... untracked files(%)

if [[ $UID -eq 0 ]]; then
PS1="${TITLEBAR}\
$RED\u$LIGHT_RED@\h \
$BLUE_BOLD\w\
$BLUE # $NO_COLOR"
else
PS1="${TITLEBAR}\
$TURQ\h $BLUE_BOLD\w$NO_COLOR\
\$(__git_ps1 ' (%s)')\
 $BLUE\$ $NO_COLOR"
fi

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2)" scp sftp ssh

# history
# =======

export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
shopt -s histappend


export PATH=$PATH:~/bin
